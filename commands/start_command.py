from telegram import (InlineKeyboardButton, ReplyKeyboardMarkup, Update,
                      constants)
from telegram.ext import ContextTypes

from commands.class_command import class_command
from commands.menu_command import message_response
from user import User


async def start_command(update: Update, context: ContextTypes):
    group_menu = [InlineKeyboardButton('‘≥’∏÷Ä’Æ 1'), InlineKeyboardButton('‘≥’∏÷Ä’Æ 2'), InlineKeyboardButton('‘≥’∏÷Ä’Æ 3')],
    group_reply_markup = ReplyKeyboardMarkup(group_menu, resize_keyboard=True)
    await update.message.reply_text(f'üëã ‘≤’°÷Ä÷á <b>{update.effective_user.first_name}</b>, ÷Ñ’•’¶ ’∏’≤’ª’∏÷Ç’∂’∏÷Ç’¥ ’ß <b>Poly Dash</b> ’π’°’ø-’¢’∏’ø’® ’∞’°’ø’∏÷Ç’Ø ’Ω’ø’•’≤’Æ’æ’°’Æ ‘æ÷Ä’°’£÷Ä’°’µ’´’∂ ’É’°÷Ä’ø’°÷Ä’°’£’´’ø’∏÷Ç’©’µ’°’∂ ’¢’°’™’∂’´ ’∞’°’¥’°÷Ä, ’¢’∏’ø’® ’¨’´’∏’æ’´’∂ ’°’∂’æ’≥’°÷Ä ’ß ÷á ’Ω’ø’•’≤’Æ’æ’°’Æ ’ß ÷Ñ’°’∂’´ ’∏÷Ä ’¥’•’Ø’® ’£’´’∑’•÷Ä’® ’¥’∂’°÷Å’•’¨ ’ß÷Ä ’∫’°÷Ä’°’∫÷â\n\nü™™ ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥ ’∫’°’ø’°’Ω’≠’°’∂’•÷Ñ ’¥’´ ÷Ñ’°’∂’´ ’∞’°÷Ä÷Å’•÷Ä’´, ’∏÷Ä’∫’•’Ω’¶’´ ’Ø’°’¶’¥’•’¥ ’±’•÷Ä ’§’°’Ω’°÷Å’∏÷Ç÷Å’°’Ø’®÷â ‘∏’∂’ø÷Ä’•÷Ñ ’±’•÷Ä ’£’∏÷Ä’Æ-’´ ’∞’°’¥’°÷Ä’®', reply_markup=group_reply_markup, parse_mode=constants.ParseMode.HTML)

async def start_button_response(update: Update, context: ContextTypes):
    text = update.message.text

    if text.startswith('‘≥’∏÷Ä’Æ'):
        lab_menu = [InlineKeyboardButton('‘º’°’¢ 1'), InlineKeyboardButton('‘º’°’¢ 2'), InlineKeyboardButton('‘º’°’¢ 3'), InlineKeyboardButton('‘º’°’¢ 4'), InlineKeyboardButton('‘º’°’¢ 5')],
        lab_reply_markup = ReplyKeyboardMarkup(lab_menu, resize_keyboard=True)
        user = User.get_or_none(id=update.effective_user.id)
        group = int(text.split(' ')[1])

        if group < 1 or group > 3:
            await update.message.reply_text('‚ùå ’ç’≠’°’¨ ’£’∏÷Ä’Æ’´ ’∞’°’¥’°÷á, ÷É’∏÷Ä’±’•÷Ñ ’∂’∏÷Ä’´÷Å÷â')
        else:
            if user is None:
                User.create(id=update.effective_user.id, group=group, lab=0).save()
            else:
                User.update(group=group).where(User.id == update.effective_user.id).execute()
            await update.message.reply_text(f'‚úÖ ‘¥’∏÷Ç÷Ñ ’®’∂’ø÷Ä’•÷Å’´÷Ñ ’∞’°’¥’°÷Ä {group} ’£’∏÷Ä’Æ’®÷â\n\n‚ùáÔ∏è ’Ä’´’¥’° ’®’∂’ø÷Ä’•÷Ñ ’¨’°’¢’´ ’∞’°’¥’°÷Ä’®÷â', reply_markup=lab_reply_markup)

    elif text.startswith('‘º’°’¢'):
        lab = int(text.split(' ')[1])
        eng_menu = [
            [InlineKeyboardButton('‚ñ∂Ô∏è ’Ä’•÷Ñ’´’¥’µ’°’∂'), InlineKeyboardButton('‚ñ∂Ô∏è ‘Ω’°÷Ä’¢’•÷Ä’ø’µ’°’∂')],
            [InlineKeyboardButton('‚ñ∂Ô∏è ’Ä’∏÷Ç’Ω’´’Ø’µ’°’∂'), InlineKeyboardButton('‚ñ∂Ô∏è ‘¥’°’§’∏’µ’°’∂')],
            [InlineKeyboardButton('‚ñ∂Ô∏è ’è’∏÷Ç÷Ü’•’Ø’π’µ’°’∂'), InlineKeyboardButton('‚ñ∂Ô∏è ’Ä’°’Ω÷Ä’°’©’µ’°’∂'), InlineKeyboardButton('‚ñ∂Ô∏è ‘π’∏’æ’¥’°’Ω’µ’°’∂')]
        ]
        eng_reply_markup = ReplyKeyboardMarkup(eng_menu, resize_keyboard=True)

        if lab < 1 or lab > 5:
            await update.message.reply_text('‚ùå ’ç’≠’°’¨ ’¨’°’¢’´ ’∞’°’¥’°÷Ä, ÷É’∏÷Ä’±’•÷Ñ ’∂’∏÷Ä’´÷Å÷â')
        else:
            user = User.get_or_none(id=update.effective_user.id)

            if user is None:
                User.create(id=update.effective_user.id, group=0, lab=lab).save()
            else:
                User.update(lab=lab).where(User.id == update.effective_user.id).execute()
            await update.message.reply_text(f'‚úÖ ‘¥’∏÷Ç÷Ñ ’®’∂’ø÷Ä’•÷Å’´÷Ñ {lab} ’¨’°’¢’®÷â\n\n‚ùáÔ∏è ’Ä’´’¥’° ’®’∂’ø÷Ä’•÷Ñ ’°’∂’£’¨’•÷Ä’•’∂’´ ’§’°’Ω’°’≠’∏’Ω’´’∂', reply_markup=eng_reply_markup)

    elif text.startswith('‚ñ∂Ô∏è'):
        user = User.get_or_none(id=update.effective_user.id)
        english_group = text.split(' ')[1]
        english_group = 0 if english_group == '’Ä’•÷Ñ’´’¥’µ’°’∂' else 1 if english_group == '‘Ω’°÷Ä’¢’•÷Ä’ø’µ’°’∂' else 2 if english_group == '’Ä’∏÷Ç’Ω’´’Ø’µ’°’∂' else 3 if english_group == '‘¥’°’§’∏’µ’°’∂' else 4 if english_group == '’è’∏÷Ç÷Ü’•’Ø’π’µ’°’∂' else 5 if english_group == '’Ä’°’Ω÷Ä’°’©’µ’°’∂' else 6

        if user is None:
                User.create(id=update.effective_user.id, group=group, lab=0).save()
        else:
            User.update(english=english_group).where(User.id == update.effective_user.id).execute()
        await update.message.reply_text(f'‚úÖ ‘¥’∏÷Ç÷Ñ ’®’∂’ø÷Ä’•÷Å’´÷Ñ {english_group}-’´’∂÷â\n\nü•≥ ’é’•÷Ä’ª, ’°’¥’•’∂ ’´’∂’π ’∫’°’ø÷Ä’°’Ω’ø ’ß, ’∞÷Ä’°’¥’°’∂’∂’•÷Ä’® ’ø’•’Ω’∂’•’¨’∏÷Ç ’∞’°’¥’°÷Ä ÷Ö’£’ø’°’£’∏÷Ä’Æ’•÷Ñ /menu ’∞÷Ä’°’¥’°’∂’®÷â')

    else: await message_response(update, context)